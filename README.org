* Plover-vim
- This is an ambitious project that aims to make vim faster and more ergonomic for plover users!

* Aims:
- Highly extensible and customisable commands and translations
- (mostly) single chords for virtually every vim command combination
- Ability to do everything in insert mode (no more normal mode)

* Motivation:
- slowness of changing between insert and normal mode
- slowness of finger spelling everything
- Emily's [[https://github.com/EPLHREU/emily-modifiers][modifiers]]
	- Contains all control, alt, windows, etc combined with every symbol that you would ever dream of
- Emily's [[https://github.com/EPLHREU/emily-symbols][symbols]]
	- Symbols with full control over spacing, capitalization and repetition
- User202729's [[https://github.com/user202729/plover-python-dictionary-lib][ultimate python dictionary library]] 
	- Makes coding a python dictionary significantly easier
	- Highly recommended you check this out if you want to create your own dictionaries

* Will not be implemented:
- control commands (Already done in Emily's symbol + modifier system)
	- ctrl-A, alt-m, etc

* Prerequisites
- Install python-plover-dictionary from plover's plugins
	- Aerick has a [[https://www.youtube.com/watch?v=uQZp7RX-h6o][video]] on this
	- (just open up the latest build of plover, goto plugins manager and find "python-plover-dictionary" in the list)

* Installation
- Clone this repository (recommended putting it where you store your Plover dictionaries)
- Update all git submodules

#+BEGIN_SRC bash
git clone https://github.com/Josiah-tan/plover-vim.git
git submodule update --init --recursive
#+END_SRC

* Modules:
- This repository separates the different dictionaries available into different modules
	- Therefore you have control over what you want to include
** Summary:
|-----------------+-----------+---------------------------------------------------------+-----------------------|
| module          | # strokes | short description                                       | examples              |
|-----------------+-----------+---------------------------------------------------------+-----------------------|
| relative number | 1         | jump to different lines (1 to 100)                      | 14j, 31k              |
|-----------------+-----------+---------------------------------------------------------+-----------------------|
| command letter  | 1         | any command followed by any character                   | fu, T?, @q, gv        |
|                 |           | (characters same as Emily's modifiers)                  |                       |
|-----------------+-----------+---------------------------------------------------------+-----------------------|
| command object  | 1         | any command followed by any text object                 | ciw, gcip, yi(        |
|                 |           | (characters same as Emily's symbols)                    |                       |
|-----------------+-----------+---------------------------------------------------------+-----------------------|
| easy motion     | 2         | command letter, but another stroke required for jumping | <leader><leader>fp st |
|-----------------+-----------+---------------------------------------------------------+-----------------------|

** relative-number
*** What is relativenumbering in vim?
- If you don't know what relative numbering is, then you are in for a treat
- Basically it allows you to move more quickly between different lines
- I recommend checking out 
	- :help relativenumber
- It is good stuff

*** How does this module improve vim?
- You can jump to different lines (up and down) in a single stroke
- This is achieved by stroking a number like usual in addition another chord
	- '-7R' => down 7 times
	- '1-6B' => up 16 times
	- '1EUR7' => down 71 times
- Note that 'R' and 'B' are the same keys as what you'd use in qwerty for up and down

*** Limitations
- You can't go past 99 lines at a time

*** Usage
- copy templates/relative\under{}number/simple.py and add it to your dictionaries for a simple configuration
- copy templates/relative\under{}number/customised.py for a more customised experience
- I recommend remapping the top left S key as #

** command-letter
*** How does this module improve vim? 
- You can perform any command followed by a letter in a single stroke for example:
	- f) = KWR*FLTDZ
	- breaking it down: 
		- KWR* = ), using emily's modifier symbols for the left hand
		- F = f
		- -LTDZ = unique ender for finders (ring finger on LT and pinky on DZ)
- The table below shows default settings
	- "Customisable" commands can be filled in for personal useage
|---------------+--------------+-----------+--------------+----------------------|
| category      | Unique Ender | Modifiers | Command      | How To Memorise      |
|---------------+--------------+-----------+--------------+----------------------|
| finders       | -LTDZ        | -FPB      | customisable |                      |
|               |              | -FP       | customisable |                      |
|               |              | -FB       |              | (used in easymotion) |
|               |              | -PB       | shift(t)     | Previous Backwards   |
|               |              | -F        | f            | Forwards             |
|               |              | -P        | t            | Previous             |
|               |              | -B        | shift(f)     | Backwards            |
|               |              |           | ""           | escaped commands     |
|---------------+--------------+-----------+--------------+----------------------|
| miscallaneous | -TZ          | -FPB      | q            | liSeN                |
|               |              | -FP       | shift(at)    | macros               |
|               |              | -FB       | customisable |                      |
|               |              | -PB       | z            | zeN                  |
|               |              | -F        | g            | the good Spot        |
|               |              | -P        | customisable |                      |
|               |              | -B        | m            | marBg                |
|               |              |           | customisable |                      |
|---------------+--------------+-----------+--------------+----------------------|

*** Limitations
- Todo

*** Usage
- copy templates/command\under{}letter/simple.py and add it to your dictionaries for default configuration
- copy templates/command\under{}letter/customised.py for a more customised experience
	- note that (shift(at)) is required to output @ because raw keyboard input is [[https://github.com/openstenoproject/plover/issues/1465][weird]]
	- See note on [[#Controlj][control(j)]]
** command-object
*** How does this module improve vim?
- You can perform any command followed by a text "object" in a single stroke for example:
	- daw = STPRARLD
	- breaking it down: 
		- STPR = unique starter
		- A = a
		- -RL = w, (see "objects" in command\under{}object/defaults.py)
		- -D = d
	- yi( = STPROFPLZ
		- STPR = unique starter
		- O = i
		- -FPL = (, using emily's symbols for the right hand
		- -Z = y
- The table below shows the default mappings
	- "Customisable" commands can be filled in for personal useage
	- note: AO combinations can be combined with other modifiers
|----------------+-----------+--------------+-----------------+-----------------------|
| Unique starter | Modifiers | Command      | How To Memorise | Plugin Requirements   |
|----------------+-----------+--------------+-----------------+-----------------------|
| STPR           | -T        | g c          | commenTary      | tpope/vim-commentary  |
|                | -D        | d            | Delete          |                       |
|                | -S        | y s          | Surround        | tpope/vim-surround    |
|                | -Z        | y            | xyZ             |                       |
|                | -TD       | customisable |                 |                       |
|                | -DZ       | d s          | Delete Surround | tpope/vim-surround    |
|                | -SZ       | v            | viSualiZe       |                       |
|                | -TS       | customisable |                 |                       |
|                | *T        | g b          | commenTary      | numToStr/Comment.nvim |
|                | *D        | customisable |                 |                       |
|                | *S        | shift(s)     | Surround        | tpope/vim-surround    |
|                | *Z        | customisable |                 |                       |
|                | *TD       | customisable |                 |                       |
|                | *DZ       | customisable |                 |                       |
|                | *SZ       | customisable |                 |                       |
|                | *TS       | customisable |                 |                       |
|                |           | customisable |                 |                       |
|----------------+-----------+--------------+-----------------+-----------------------|
|                | A         | a            | around          |                       |
|                | O         | i            |                 |                       |
|                | AO        | customisable |                 |                       |
|                |           | ""           |                 |                       |
|----------------+-----------+--------------+-----------------+-----------------------|
*** Limitations
- some command + motion combinations must be stroked in two, for example:
	- ct=
*** Usage
- copy templates/command\under{}object/simple.py and add it to your dictionaries for default configuration
- copy templates/command\under{}object/customised.py for a more customised experience
	- note that (shift(s)) is required to output S because raw keyboard input is [[https://github.com/openstenoproject/plover/issues/1465][weird]]
	- See note on [[#Controlj][control(j)]]
** easy-motion
*** What is easy-motion in vim?
- easy motion is a [[https://github.com/easymotion/vim-easymotion][plugin]] that enables "vim motions on speed!"
- Aims to optimise text navigation
*** How does this module improve vim? 
- You can perform a search for a letter h as follows
	- <leader><leader>fhtk => H-FBLTDZ/T-BG
	- breaking it down: 
		- H => h, using emily's modifier symbols for the left hand
		- -FB => <leader><leader>f
		- -LTDZ => unique ender for finders
		- T-BG => tk, this is the second stroke that takes you to the location

|--------------+-----------+-------------------+-------------------|
| Unique Ender | Modifiers | Command           | How To Memorise   |
|--------------+-----------+-------------------+-------------------|
| -LTDZ        | -FB       | <leader><leader>f | Forward Backwards |
|--------------+-----------+-------------------+-------------------|

*** Problems
- Can cause mental overhead when stroking to get to the location

*** Usage
- Put this somewhere in your vimrc
#+BEGIN_SRC vim
let g:EasyMotion_keys = 'bdfgjklmnprstxz'
#+END_SRC
- copy templates/easy\under{}motion/simple.py and add it to your dictionaries for default configuration
- copy templates/easy\under{}motion/customised.py for a more customised experience
	- see note on [[#Controlj][control(j)]]
* Customisation
** Control(J)
- Allows you to execute any (most) commands as if you are from normal mode
- Sample .vimrc config (thanks [[https://github.com/openstenoproject/plover/discussions/1350#discussioncomment-1905781][User202729]])!
#+BEGIN_SRC vim
"do nothing in normal mode
nore <c-j> <nop> 
"escape insert mode, then return to insert mode afterwards
inore <c-j> <c-\><c-o>
"escape command mode
cnoremap <c-j> <esc>

if !has('nvim')
	" escape terminal mode, then return to terminal mode
	set termwinkey=<c-j>
else
	" escape terminal mode, does not return to terminal mode :<
	tnoremap <c-j> <C-\><C-n>
endif
#+END_SRC
